{"Name":"MWPhotoBrowser","Id":2296,"Alias":"MWPhotoBrowser","Description":"\n**MWPhotoBrowser** can display one or more images or videos by providing either \n`UIImage` objects, `PHAsset` objects, or URLs to library assets, web images/videos \nor local files. The photo browser handles the downloading and caching of photos from \nthe web seamlessly. Photos can be zoomed and panned, and optional (customisable) \ncaptions can be displayed.\n\nThe browser can also be used to allow the user to select one or more photos using either \nthe grid or main image view.\n\n## Usage\n\n`PhotoBrowser` is designed to be presented within a navigation controller. Simply set the \ndelegate (which must conform to `IPhotoBrowserDelegate`) and implement the 2 required \ndelegate methods to provide the photo browser with the data in the form of \n`IPhoto` objects. You can create an `IPhoto` object through the `PhotoBrowserPhoto` type\nby providing a `UIImage` object, `PHAsset` object, or a URL containing the path to a file, \nan image online or an asset from the asset library.\n\n`PhotoBrowserPhoto` objects handle caching, file management, downloading of web images, \nand various optimisations for you. If however you would like to use your own data model \nto represent photos you can simply ensure your model conforms to the `IPhoto` interface. \nYou can then handle the management of caching, downloads, etc, yourself.\n\n    // Create browser delegate\n    class BrowserDelegate : PhotoBrowserDelegate {\n        private IPhoto[] photos;\n\n        public BrowserDelegate() {\n            // Local photo\n            var resource = PhotoBrowserPhoto.FromFilePath(NSBundle.MainBundle.PathForResource(\"photo\", \"jpg\"));\n            \n            // Remote photo\n            var photo = PhotoBrowserPhoto.FromUrl(new NSUrl(\"http://example.org/photo.jpg\"));\n            \n            // Video with thumbnail photo\n            var video = PhotoBrowserPhoto.FromUrl(new NSUrl(\"http://example.org/preview.jpg\"));\n            video.VideoUrl = new NSUrl(\"http://example.org/video.mp4\");\n            \n            // Create array of IPhoto objects\n            photos = new IPhoto[] { resource, photo, video };\n        }\n\n        public override nuint GetPhotoCount(PhotoBrowser photoBrowser) {\n            return (nuint)photos.Length;\n        }\n\n        public override IPhoto GetPhoto(PhotoBrowser photoBrowser, nuint index) {\n            return photos[(int)index];\n        }\n    }\n\n    // Create browser (can\u0027t be re-used)\n    var browser = new PhotoBrowser(new BrowserDelegate());\n    browser.DisplayNavArrows = true;\n    browser.ZoomPhotosToFill = true;\n    browser.EnableGrid = true;\n    \n    // Present\n    NavigationController.PushViewController(browser, true);\n\n    // Manipulate\n    browser.ShowNextPhoto(true);\n    browser.ShowPreviousPhoto(true);\n    browser.CurrentIndex = 2;\n","Version":"2.1.1.1","Summary":"A simple iOS photo and video browser with optional grid view, captions and selections.","QuickStart":"\n**MWPhotoBrowser** can display one or more images or videos by providing either \n`UIImage` objects, `PHAsset` objects, or URLs to library assets, web images/videos \nor local files. The photo browser handles the downloading and caching of photos from \nthe web seamlessly. Photos can be zoomed and panned, and optional (customisable) \ncaptions can be displayed.\n\nThe browser can also be used to allow the user to select one or more photos using either \nthe grid or main image view.\n\n## Usage\n\n`PhotoBrowser` is designed to be presented within a navigation controller. Simply set the \ndelegate (which must conform to `IPhotoBrowserDelegate`) and implement the 2 required \ndelegate methods to provide the photo browser with the data in the form of \n`IPhoto` objects. You can create an `IPhoto` object through the `PhotoBrowserPhoto` type\nby providing a `UIImage` object, `PHAsset` object, or a URL containing the path to a file, \nan image online or an asset from the asset library.\n\n`PhotoBrowserPhoto` objects handle caching, file management, downloading of web images, \nand various optimisations for you. If however you would like to use your own data model \nto represent photos you can simply ensure your model conforms to the `IPhoto` interface. \nYou can then handle the management of caching, downloads, etc, yourself.\n\n    // Create browser delegate\n    class BrowserDelegate : PhotoBrowserDelegate {\n        private IPhoto[] photos;\n\n        public BrowserDelegate() {\n            // Local photo\n            var resource = PhotoBrowserPhoto.FromFilePath(NSBundle.MainBundle.PathForResource(\"photo\", \"jpg\"));\n            \n            // Remote photo\n            var photo = PhotoBrowserPhoto.FromUrl(new NSUrl(\"http://example.org/photo.jpg\"));\n            \n            // Video with thumbnail photo\n            var video = PhotoBrowserPhoto.FromUrl(new NSUrl(\"http://example.org/preview.jpg\"));\n            video.VideoUrl = new NSUrl(\"http://example.org/video.mp4\");\n            \n            // Create array of IPhoto objects\n            photos = new IPhoto[] { resource, photo, video };\n        }\n\n        public override nuint GetPhotoCount(PhotoBrowser photoBrowser) {\n            return (nuint)photos.Length;\n        }\n\n        public override IPhoto GetPhoto(PhotoBrowser photoBrowser, nuint index) {\n            return photos[(int)index];\n        }\n    }\n\n    // Create browser (can\u0027t be re-used)\n    var browser = new PhotoBrowser(new BrowserDelegate());\n    browser.DisplayNavArrows = true;\n    browser.ZoomPhotosToFill = true;\n    browser.EnableGrid = true;\n    \n    // Present\n    NavigationController.PushViewController(browser, true);\n\n    // Manipulate\n    browser.ShowNextPhoto(true);\n    browser.ShowPreviousPhoto(true);\n    browser.CurrentIndex = 2;\n","Hash":"0af81aeec3bb245daf29e341f208d41e","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}